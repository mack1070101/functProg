(defun fl-interp (E P)
  (cond
    ((atom E) E)
    (t
      (let ( (f (car E))  (arg (cdr E)) )
        (cond
          ; handle built-in functions
          ((eq f 'args) (car arg))
          ((eq f 'if) (if (fl-interp (car arg) P) (fl-interp (cadr arg) P) (fl-interp (caddr arg) P)))
          ((eq f 'null) (NULL (car arg)))
          ((eq f 'atom) (ATOM (car arg)))
          ((eq f 'eq) (eq (fl-interp (car arg) P) (fl-interp (cdr arg) P)))
          ((eq f 'first)  (car (fl-interp (car arg) P)))
          ((eq f 'rest) (cdr (fl-interp (car arg) P)))
          ((eq f 'cons) (cons (fl-interp (car arg) P) (fl-interp (cadr arg) P)) )
          ((eq f 'equal) (equal (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f 'isnumber) (numberp (fl-interp (car arg) P)))
          ((eq f '+) (+ (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f '-) (- (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f '*) (* (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f '>) (> (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f '<) (< (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f '=) (= (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f 'and) (and (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f 'or) (or (fl-interp (car arg) P) (fl-interp (cadr arg) P)))
          ((eq f 'not) (not (fl-interp (car arg) P)))
          (t  E)
          ))
      )
    )
  )
